package mavery.projecteuler;

import java.util.HashSet;
import java.util.Set;

public class Problem44
{
	
	private static Set<Long> pents;
	
	private static int topPentN;
	
	private static long topPentValue;

	/**
	 * Pentagonal numbers are generated by the formula, Pn=n(3n - 1)/2. The first
	 * ten pentagonal numbers are:
	 * 
	 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	 * 
	 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
	 * difference, 70 22 = 48, is not pentagonal.
	 * 
	 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
	 * difference is pentagonal and D = |Pk - Pj| is minimised; what is the value
	 * of D?
	 */
	public static void main(String[] args)
	{
		int diffN = 1;
		while (true)
		{
			long diff = getPent(diffN);
			for (int i = diffN + 1; i < (diff / 3) + 1; i++)
			{
				long x = getPent(i);
				if (isPent(2* x - diff) && isPent(x - diff))
				{
					System.out.println(diff + " " + x + " " + (x + diff) + " " + (x - diff));
					return;
				}
			}
			diffN++;
		}
	}
	
	private static boolean isPent(long value)
	{
		if (pents == null)
		{
			pents = new HashSet<Long>();
			topPentN = 0;
			topPentValue = 0;
		}
		
		while (topPentValue < value)
		{
			topPentValue = (getPent(++topPentN));
			pents.add(topPentValue);
		}
		
		return pents.contains(value);
	}
	
	private static long getPent(long n)
	{
		return n * (3L * n - 1L) / 2L;
	}

}
